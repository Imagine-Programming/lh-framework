--[[
    Script:             md5.lua
    Product:            md5.lh (MemoryEx LuaHeader)
    Author:             Imagine Programming <Bas Groothedde>
    Website:            http://www.imagine-programming.com
    Contact:            http://www.imagine-programming.com/contact.html
    Date:               12-11-2013
    Version:            1.0.0.0
    Remarks:            Requires MemoryEx.
    Description:        An LH module for generating MD5 hashes of data

    GIT version
    
    License 1:            MIT
    [=[
        Copyright (c) 2013 Imagine Programming, Bas Groothedde

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in
        all copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
        THE SOFTWARE.
    ]=]
    
    License 2:          RSA MD5 message-digest algorithm
    [=[
        MD5 - RSA Data Security, Inc., MD5 message-digest algorithm
        Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991. All rights reserved.

        License To copy And use this software is granted provided that it
        is identified as the "RSA Data Security, Inc. MD5 Message-Digest
        Algorithm" in all material mentioning or referencing this software
        Or this function.

        License is also granted To make And use derivative works provided
        that such works are identified as "derived from the RSA Data
        Security, Inc. MD5 Message-Digest Algorithm" in all material
        mentioning Or referencing the derived work. 
                                                                       
        RSA Data Security, Inc. makes no representations concerning either
        the merchantability of this software Or the suitability of this
        software For any particular purpose. It is provided "as is"
        without express Or implied warranty of any kind. 
                                                                       
        These notices must be retained in any copies of any part of this
        documentation and/Or software.
    ]=]
]]

-- libmd5 is a dll version of md5_slow.lua translated to C++, 
-- compiled with vc++. The source will be added later.

local libmd5;

-- alias for quick structure definitions
local struct = MemoryEx.DefineStruct;

-- MD5 Context
local MD5_CTX = struct{
    DWORD       ("state", 4);       -- state (ABCD)
    DWORD       ("count", 2);       -- number of bits, modulo 2^64 (lsb first)
    BYTE        ("buffer", 64);     -- input buffer block
};

-- a function to convert data to a hexadecimal string.
local function datahex(data, len)
    local s = "";
    local f = string.format;
    for i = 0, (len - 1) do
        local h = f("%x", MemoryEx.UnsignedByte(data + i));
        if(h:len() < 2)then
            h = "0"..h;
        end
        
        s = s..h;
    end
    
    return s;
end;

-- a function for a quick hash of a buffer.
local buffer = function(buffer, length)
    local md5;
    local ctx = MD5_CTX:New();
    if(ctx)then
        local digest = MemoryEx.Allocate(16);
        if(digest)then
            local lpctx = ctx:GetPointer();
            libmd5.init(lpctx);
            libmd5.update(lpctx, buffer, length);
            libmd5.finalize(digest, lpctx);
            
            md5 = datahex(digest, 16);
            
            MemoryEx.Free(digest);
        end
        
        ctx:Free();
    end
    
    return md5;
end;

local lh = {
    info = {
        name        = "md5.lh";
        description = "Generate MD5 hashes of data.";
        author      = "Imagine Programming <Bas Groothedde>";
        contact     = "contact@imagine-programming.com";
        version     = "1,0,0,0";
    };
    
    functions = {
        buffer = function(hLH, buff, length)
            return buffer(buff, length);
        end;
        
        string = function(hLH, str)
            local res = nil;
            local len = str:len();
            if(len < 1)then
                return nil;
            end
            
            local buff = MemoryEx.AllocateEx(len + 1);
            if(buff)then
                buff:String(-1, MEMEX_ASCII, str);
                res = buffer(buff:GetPointer(), len);
                buff:Free();
            end
            
            return res;
        end;
        
        file = function(hLH, path)
            local r = nil;
            local f = io.open(path, "rb");
            if(f)then
                local block = MemoryEx.AllocateEx(2048);
                if(block)then
                    local blockptr = block:GetPointer();
                    local ctx = MD5_CTX:New();
                    if(ctx)then
                        local lpctx = ctx:GetPointer();
                        
                        libmd5.init(lpctx);
                        repeat 
                            local data = f:read(2048);
                            if(data)then
                                local len  = data:len();
                                block:LString(len, data); 
                                libmd5.update(lpctx, blockptr, len);
                            end
                        until (not data);
                        
                        local digest = MemoryEx.Allocate(16);
                        if(digest)then
                            libmd5.finalize(digest, lpctx);
                            r = datahex(digest, 16);
                            MemoryEx.Free(digest);
                        end
                        
                        ctx:Free();
                    end

                    block:Free();
                end
                f:close();
            end
            
            return r;
        end;
    };
};

libmd5 = Library.Load("", true);
return lh;